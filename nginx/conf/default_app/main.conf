# error_page 500 501 502 503 504 505 506 @5xx;
# location @5xx {
#     internal;
# 	content_by_lua_block { ngx.print( ngx.status, ' Error: ', ngx.localtime(),' ', ngx.var.remote_addr ,'\n');ngx.say(ngx.req.raw_header());ngx.say(require("ngx.errlog").get_logs(200));ngx.say(require('env').hostname)}

# }

location = /favicon.ico {
 	empty_gif;
 	expires 2y;
 	return 204;
 	access_log     off;
 }

 #slb heatbeat testing
 location = /noc.gif {
 	return 200;
 }

 location /mock/ {
     gzip on;
     gzip_min_length 100;
     content_by_lua_block {
     require('mocks').mock()
    }
}
location ~ \.(_.*|DS_Store|Spotlight-V100|TemporaryItems|Trashes|hidden|localized)$ {
    access_log  off;
    error_log   off;
    if ($request_method = PUT) {
    return 403;
    }  
    return 404;
}
location ~ \.metadata_never_index$ {
    return 200 "Don't index this drive, Finder!";
}
    set $destination $http_destination; 
    set $new_path "";
    set $webdav_root "/webdav";
    set $checkPropfind "";

location / {
    client_body_timeout    120;
    send_timeout           100;
    client_max_body_size   2000m;
    
    rewrite_by_lua_block {
        require('lib.basic_auth').handle(require('env').auth_conf)
        require('klib.dump').logs(ngx.req.get_headers())
    }
    dav_ext_lock zone=webdav;
    dav_methods		PUT MKCOL;
    dav_ext_methods	OPTIONS LOCK UNLOCK;

      autoindex		on;
      autoindex_exact_size	on;
      autoindex_localtime	on;
      
      fancyindex on;
      fancyindex_exact_size off;
      fancyindex_localtime on;
      fancyindex_name_length 255;
      
      root			$webdav_root;
      
      error_page		599 = @propfind_handler;
      error_page		598 = @delete_handler;
      error_page		597 = @copy_move_handler;
      error_page		596 = @propfind_withdepth_handler;
      
      open_file_cache		off;
      
      if ($request_method != OPTIONS) {
        # CORS
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'OPTIONS, GET, HEAD, POST, PUT, MKCOL, MOVE, COPY, DELETE, PROPFIND, PROPPATCH, LOCK, UNLOCK' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,X-Accept-Charset,X-Accept,origin,accept,if-match,destination,overwrite' always;
        add_header 'Access-Control-Expose-Headers' 'ETag' always;
        add_header 'Access-Control-Max-Age' 1728000 always;
      }
      
      if ($request_method = OPTIONS) {
        # CORS
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'OPTIONS, GET, HEAD, POST, PUT, MKCOL, MOVE, COPY, DELETE, PROPFIND, PROPPATCH, LOCK, UNLOCK';
        add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,X-Accept-Charset,X-Accept,origin,accept,if-match,destination,overwrite';
        add_header 'Access-Control-Expose-Headers' 'ETag';
        add_header 'Access-Control-Max-Age' 1728000;
        
        # WebDAV compliance
        add_header	Allow 'OPTIONS, GET, HEAD, POST, PUT, MKCOL, MOVE, COPY, DELETE, PROPFIND, PROPPATCH, LOCK, UNLOCK';
        add_header	DAV '1, 2';
        return 200;
      }
      
      
      if ($request_method = PROPFIND) { # Normal flow for PROPFIND
        set $checkPropfind "propfind";
      }
      
      if ($http_depth = 0) { # FIX for Depth = 0 allowed unauthenticated
        set $checkPropfind "${checkPropfind}+withDepth";
      }
      
      if ($http_depth = 1) { # FIX for Depth = 1 allowed unauthenticated
        set $checkPropfind "${checkPropfind}+withDepth";
      }
      
      if ($checkPropfind = "propfind") { # Normal flow for PROPFIND
        return 599;
      } 
      
      if ($checkPropfind = "propfind+withDepth") { # FIX for Depth = 1 allowed unauthenticated
        return 596;
      }   
      
      if ($request_method = PROPPATCH) { # Unsupported, allways return OK.
        add_header	Content-Type 'text/xml';
        return		207 '<?xml version="1.0"?><a:multistatus xmlns:a="DAV:"><a:response><a:propstat><a:status>HTTP/1.1 200 OK</a:status></a:propstat></a:response></a:multistatus>';
      }
      
      if ($request_method = MKCOL) { # Microsoft specific handle: add trailing slash.
        rewrite ^(?<captured_path>.*[^/])$ $captured_path/ break;
      }
      
      if ($request_method = DELETE) {
        return 598;
      }
      
      if ($request_method = COPY) {
        return 597;
      }
      
      if ($request_method = MOVE) {
        return 597;
      }      
    }
    
    location @propfind_handler {
      internal;
      open_file_cache	off;
      if (!-e $webdav_root/$uri) { # Microsoft specific handle.
        return 404;
      }
      root			$webdav_root;
      dav_ext_methods		PROPFIND;
    }
    
    location @propfind_withdepth_handler { # Same as above but authenticated.
    rewrite_by_lua_block {
        require('lib.basic_auth').handle(require('env').auth_conf)
    }
      internal;
      open_file_cache	off;
      if (!-e $webdav_root/$uri) { # Microsoft specific handle.
        return 404;
      }
      root			$webdav_root;
      dav_ext_methods		PROPFIND;
    }
    
    location @delete_handler {
    rewrite_by_lua_block {
        require('lib.basic_auth').handle(require('env').auth_conf)
    }
      internal;
      open_file_cache	off;
      if ($destination ~ ^https?://(?<captured_path>.*)$) {
        set $new_path $captured_path;
        more_set_input_headers "Destination: http://$new_path";
      }
      if (-d $webdav_root/$uri) { # Microsoft specific handle: Add trailing slash to dirs.
        more_set_input_headers "Destination: http://$new_path/";
        rewrite ^(?<captured_path>.*[^/])$ $captured_path/ break;
      }
      
      root			$webdav_root;
      dav_methods		DELETE;
    }

    location @copy_move_handler {
    rewrite_by_lua_block {
        require('lib.basic_auth').handle(require('env').auth_conf)
    }
      internal;
      open_file_cache	off;
      
      if ($destination ~ ^https?://(?<captured_path>.*)$) {
        set $new_path $captured_path;
        more_set_input_headers "Destination: http://$new_path";
      }
      
      if (-d $webdav_root/$uri) { # Microsoft specific handle: Add trailing slash to dirs.
        more_set_input_headers "Destination: http://$new_path/";
        rewrite ^(?<captured_path>.*[^/])$ $captured_path/ break;
      }
      
      root			$webdav_root;
      dav_methods		COPY MOVE;
    }
    

location /__tapd {
    access_log off;
    log_not_found off;
    allow 127.0.0.1;
    allow 172.16.0.0/12; # docker
    allow 10.0.0.0/8; # internal network
    allow 192.168.0.0/16; # internal network
    deny  all;
	content_by_lua_block {
		require('lib.tap').tapd()
}
}