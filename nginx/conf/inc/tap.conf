location /__tap {
    access_log off;
    log_not_found off;
    allow 127.0.0.1;
    allow 172.16.0.0/12; # docker
    allow 10.0.0.0/8; # internal network
    allow 192.168.0.0/16; # internal network
    deny  all;
	content_by_lua_block {
		package.loaded['tap'] = nil
		require('tap').handle()
	}
}

location /__tapd {
    access_log off;
    log_not_found off;
    allow 127.0.0.1;
    allow 172.16.0.0/12; # docker
    allow 10.0.0.0/8; # internal network
    allow 192.168.0.0/16; # internal network
    deny  all;
	content_by_lua_block {
		require('tap').tapd()
}
}

location /__yaml {
    access_log off;
    log_not_found off;
    allow 127.0.0.1;
    allow 172.16.0.0/12; # docker
    allow 10.0.0.0/8; # internal network
    allow 192.168.0.0/16; # internal network
    deny  all;
	content_by_lua_block {
		require('tap').yaml()
}
}

location /__tapeval {
    access_log off;
    log_not_found off;
    allow 127.0.0.1;
    allow 172.16.0.0/12; # docker
    allow 10.0.0.0/8; # internal network
    allow 192.168.0.0/16; # internal network
    deny  all;
	content_by_lua_block {
		require('tap').eval()
}
}

location /__tapresolve {
    access_log off;
    log_not_found off;
    allow 127.0.0.1;
    allow 172.16.0.0/12; # docker
    allow 10.0.0.0/8; # internal network
    allow 192.168.0.0/16; # internal network
    deny  all;
	content_by_lua_block {
	require('tap').resolve()
}
}


location /__taplog {
    access_log off;
    log_not_found off;
    allow 127.0.0.1;
    allow 172.16.0.0/12; # docker
    allow 10.0.0.0/8; # internal network
    allow 192.168.0.0/16; # internal network
    deny  all;
	content_by_lua_block {
	local errlog = require "ngx.errlog"
	ngx.header['content-type'] = 'text/plain'
	local level = ngx[ngx.var.arg_level or 'NOTICE']
	if level then
		errlog.set_filter_level(level)
	end
	local res = errlog.get_logs(tonumber(ngx.var.arg_count or 30)) or {}
	for i = 1, #res, 3 do
		ngx.say(res[i + 2])
	end
}
}
